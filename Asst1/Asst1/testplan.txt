AUTHORS :
	Jonathan Konopka
		NETID : jk1549
		RUID : 178005220
	Nicholas Rytelewski
		NETID : nr548
		RUID : 197000952

	|--------------------------------------------------------------------------------------|

	TEST PLAN SYNOPSIS :

		Our goal with this projects tests cases was to have varying files with a 
		sizeable amount of tokens to be used so that our programs output would be
		accurate, even with a sizeable load on it.

		NOTE : Formatting for files may be odd since it is in this testcase document.
		       I tried to make the file contents all line up.

	|--------------------------------------------------------------------------------------|

					SMALLER SAMPLE SIZE

	DIRECTORY :
		- ./1 (DIRECTORY TO BE SUPPLIED)
			- 1.txt
			- 2.txt
			- 3.txt
	
		FILE "1.txt" :
			"1 2 3 4 5 "
		FILE "2.txt" :
			"1 2 3 4 5
			 1 2 3 4 5
			 1 2 3 4 5
			 1 2 3 4 5 "
		FILE "3.txt" :
			"1 2 3 4 5 
			 6 7 8 9 10"
	
		The amount of tokens in these files gives use a small sample to work with in 
		recursive mode. 

			      |----------------------------------------------|

	"-R -b ./1" TEST OUTPUT : 

		FILE "HuffmanCodebook" :
			"^
			1101	1
			0	^s
			100	2
			1110	3
			1100	4
			1111	5
			1010	^n
			1011110	6
			1011111	7
			101100	8
			101101	9
			101110	10
			
			"		
		
	"-R -c ./1 HuffmanCodebook" TEST OUTPUT : 

		FILE "1.txt.hcz" :
			"110101000111001100011110"
		FILE "2.txthcz" :
			"11010100011100110001111101011010100011100110001111101011010100011100110001111101011010100011100110001111"
		FILE "3.txthcz" :
			"1101010001110011000111101010101111001011111010110001011010101110"

	"-R -d ./1 HuffmanCodebook" TEST OUTPUT : 

		FILE "1.txt" :
			"1 2 3 4 5 "
		FILE "2.txt" :
			"1 2 3 4 5
			 1 2 3 4 5
			 1 2 3 4 5
			 1 2 3 4 5 "
		FILE "3.txt" :
			"1 2 3 4 5 
			 6 7 8 9 10"

	These function outputs are identical when run without recursive mode / run on specific files
		
	|--------------------------------------------------------------------------------------|

					BIGGER SAMPLE SIZE

	DIRECTORY :
		- ./2 (DIRECTORY TO BE SUPPLIED)
			- ONE.txt
			- TWO.txt
			- THREE.txt

	The following website was used to generate the tokens in each of the 3 files :
	http://www.unit-conversion.info/texttools/random-string-generator/

	We set the allowed characters to "xo", number of strings to 100, and length to 3.
	This generated 100 permutations for each file with strings like "xxx", "xox", "oxo"... etc.
	We did this three times and made each file the output. They are unfortunately too long to include
	the full text :(
	
			      |----------------------------------------------|

	"-R -b ./2" TEST OUTPUT : 
	
		FILE "HuffmanCodebook" :
			"^
			 1001	oxx
			 0	^n
			 1000	ooo
			 1100	xoo
			 1111	oxo
			 1011	oox
			 1101	xox
			 1110	xxo
			 1010	xxx
			
			"		

	"-R -c ./2 HuffmanCodebook" TEST OUTPUT : 

		FILE "ONE.txt.hcz" :

		FILE "TWO.txthcz" :

		FILE "THREE.txthcz" :


	"-R -d ./2 HuffmanCodebook" TEST OUTPUT : 

	(Files are too long to include) Original files were returned. 
	Original file can be viewed for testing by decoding the outputs of the .hcz files above

	|--------------------------------------------------------------------------------------|

	Overall, our tests were successful. We had some issues with segmentation faults towards the 
	end on the iLab machines while the code was running on our machines. These tests were run in
	recursive mode as examples above, but when given a specific file and with the -R flag removed,
	the output for that specific file remains unchanged!


